# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master and dev branches
  push:
    branches:
      - master
      - dev
      - docker-fix  # temporary for testing
  pull_request:
    branches: 
      - master 
      - dev 

env:
  USER: ${{ secrets.DOCKER_HUB_USERNAME }}
  PASS: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  APP: srbench

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  docker_build: # Test if docker image builds
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ env.USER }}
          password: ${{ env.PASS }}
      -
        name: Build 
        uses: docker/build-push-action@v2
        with:
          context: .
          load: true
          tags: ${{ env.USER }}/${{ env.APP }}:test 
          cache-from: type=gha
          # cache-to: type=registry,ref=${{ env.USER }}/${{ env.APP }}:buildcache,mode=max
          cache-to: type=gha,mode=max
  docker_test:
    runs-on: ubuntu-latest
    container: lacava/srbench:latest
    needs: docker_build
    steps:
      -
        name: Conda
        run: | 
          ls 
          eval "$(conda shell.bash hook)"
          conda init bash
          conda activate srbench
      -
        name: Evaluate Model
        run: |
          ls
          cd experiment
          bash test_evaluate_model.sh
      -
        name: Evaluate Tuned Model
        run: |
          ls
          cd experiment
          python -m pytest -v test_tuned_models.py
  docker_push:
    runs-on: ubuntu-latest
    needs: 
      - docker_build
      - docker_test
    steps:
      - name: Build 
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.USER }}/${{ env.APP }}:latest
          cache-from: type=gha
          # cache-to: type=registry,ref=${{ env.USER }}/${{ env.APP }}:buildcache,mode=max
          cache-to: type=gha,mode=max
