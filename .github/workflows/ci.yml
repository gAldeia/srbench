name: CI

# Controls when the action will run. 
# on:
#   pull_request:
#     branches: 
#       - master
#     paths:
#       - 'algorithms/**'
on:
  push:
    branches:
      - separate-envs

env: 
  CACHE_NUMBER: 0

jobs:
  ################################################################################
  # matrix build and test
  ################################################################################
  detect-directory-changes:
    name: "Detect Directory Changes"
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.detect.outputs.changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Detect Directory Changes
        id: detect
        uses: tchupp/actions-detect-directory-changes@v1
        with:
          included-paths: "./algorithms/"

  # build:
  #   name: "Build sub-projects"
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       project: ${{ fromJSON(needs.detect-directory-changes.outputs.changed) }}
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        # folder: ${{ fromJSON(needs.detect-directory-changes.outputs.changed) }}
      # matrix:
        alg:
          - afp    
          - geneticengine
          - operon
          - bingo
          - gpgomea        
          - ps-tree
          - dsr    
          - gplearn        
          - pstree
          - e2et   
          - gpzgd          
          - pysr
          - eplex  
          - gsgp           
          - qlattice
          - eql    
          - itea           
          - sbp-gp
          - feat   
          - mrgp           
          - taylorgp
          - ffx    
          - nsga-dcgp      
          - uDSR
      fail-fast: false
    steps:
      - 
        name: Checkout code
        uses: actions/checkout@v3
      - 
        name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: srbench
          use-mamba: true
      - 
        name: Cache conda
        uses: actions/cache@v2
        with:
          path: /usr/share/miniconda3/envs/srbench
          key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}
        id: cache
      - 
        name: Update environment
        if: steps.cache.outputs.cache-hit != 'true'
        run: | 
          mamba env update -n srbench -f environment.yml 
      -
        name: Check Cache Hit
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Didn't find the cache for the srbench environment :("
          conda info --envs
################################################################################
# install the submission
################################################################################
      - 
        name: Make alg environment
        run: |
          echo "Installing dependencies for ${{ matrix.alg }}"
          echo "Copying base environment"
          conda create --name srbench-${{ matrix.alg }} --clone srbench
      - 
        name: Install SR dependencies from environment.yml
        if: hashFiles('algorithms/${{ matrix.alg }}/environment.yml') != ''
        run: mamba env update -n srbench-${{ matrix.alg }} -f algorithms/${{ matrix.alg }}/environment.yml
      - 
        name: Install SR dependencies from requirements.txt
        if: hashFiles('algorithms/${{ matrix.alg }}/requirements.txt') != ''
        run: mamba run -n srbench-${{ matrix.alg }} pip install -r algorithms/${{ matrix.alg }}/requirements.txt
      - 
        name: Install SR method
        if: hashFiles('algorithms/${{ matrix.alg }}/install.sh') != ''
        run: |
          cd algorithms/${{ matrix.alg }}
          if test -f "install.sh" ; then
            echo "running install.sh..."
            mamba run -n srbench-${{ matrix.alg }} bash install.sh
          else
            echo "::warning::No install.sh file found in ${{ matrix.alg }}. Assuming the method is a conda package specified in environment.yml."
          fi

      - 
        name: Copy files and environment
        run: |
          mkdir -p experiment/methods/${{ matrix.alg }}
          cp algorithms/${{ matrix.alg }}/regressor.py experiment/methods/${{ matrix.alg }}/
          cp algorithms/${{ matrix.alg }}/metadata.yml experiment/methods/${{ matrix.alg }}/
          touch experiment/methods/${{ matrix.alg }}/__init__.py

          # export env
          eval "$(conda shell.bash hook)"
          conda init bash
          conda activate $subenv 
          echo "/////// Conda Environment (conda env export)/////"
          conda env export  #> algorithms/${{ matrix.alg }}/environment.lock.yml
          echo "/////////////////////////////////////////////////"
  ################################################################################
  # tests
  ################################################################################
      -
        name: Test Method
        run: |
          cd experiment
          pwd
          ls
          mamba run -n srbench-${{ matrix.alg }} python -m pytest -v test_algorithm.py --ml ${{ matrix.alg }}
################################################################################          