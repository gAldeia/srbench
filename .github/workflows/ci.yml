# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master and dev branches
  push:
    branches:
      - master
      - dev
      - docker-fix  # temporary for testing
  pull_request:
    branches: 
      - master 
      - dev 

jobs:
  check:
    name: Check env changes
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    env:
      skip: 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
        if: env.skip == 'false'

      - name: check modified files
        id: check_files
        run: |
          if ${{ env.skip }} ; then
              echo "::set-output name=run_job::true"
          else
            echo "=============== list modified files ==============="
            git diff --name-only HEAD^ HEAD
            echo "========== check paths of modified files =========="
            git diff --name-only HEAD^ HEAD > files.txt
            while IFS= read -r file
            do
              echo $file
              if [[ $file == environment.yml ]]; then
                echo "::set-output name=run_job::true"
              elif [[ $file != experiment/methods/src/* ]]; then
                echo "This modified file is not under the 'src' folder."
                echo "::set-output name=run_job::false"
                break
              else
                echo "::set-output name=run_job::true"
              fi
            done < files.txt
          fi

  ################################################################################
  # environment setup
  ################################################################################
  setup_environment:
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.run_job == 'true'
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - 
        name: Checkout code
        uses: actions/checkout@v2
      - 
        name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
      - 
        name: Set cache date
        run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
      - 
        name: Cache conda
        uses: actions/cache@v2
        env: 
          CACHE_NUMBER: 0
        with:
          # path: ${{ CONDA }}
          path: /usr/share/miniconda3/envs/srbench
          key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}-${{ env.DATE }}-${{ env.CACHE_NUMBER }}
          restore-keys: 
            - ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}-${{ env.DATE }}
            - ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}
        id: cache
      - 
        name: Update environment
        if: steps.cache.outputs.cache-hit != 'true'
        run: mamba env update -n srbench -f environment.yml
      - 
        name: Test cache
        if: steps.cache.outputs.cache-hit == 'true'
        run: echo "CONDA: $CONDA"
  ################################################################################
  # parallel methods install
  ################################################################################
  install_setup:
    name: Get methods with install scripts
    needs: check
    if: needs.check.outputs.run_job == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      - id: set-matrix
        run: |
          bash ci/get_install_list.sh
          echo "::set-output name=matrix::$(cat ci/installs.json)"

  installs:
    name: Install methods with install scripts
    needs: 
      - setup_environment
      - install_setup
      - check
    if: needs.check.outputs.run_job == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    # container: lacava/srbench:base
    strategy:
      matrix: ${{fromJSON(needs.install_setup.outputs.matrix)}}
      fail-fast: false
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      - 
        name: Cache conda
        id: cache
        uses: actions/cache@v2
        env: 
          CACHE_NUMBER: 0
        with:
          path: /usr/share/miniconda3/envs/srbench
          key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}-${{ env.DATE }}-${{ env.CACHE_NUMBER }}
          # -${{ hashFiles('experiment/methods/src/${{ matrix.install_file }}') }}
          restore-keys: 
            - ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}-${{ env.DATE }}
            - ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}
      - 
        name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          environment-file: environment.yml
          activate-environment: srbench
      - 
        name: Initialize
        run: | 
          # eval "$(conda shell.bash hook)"
          # conda init bash
          # conda activate srbench
          conda info -a
          conda list
          echo "CONDA: $CONDA"
      - name: Install 
        if: steps.cache.outputs.cache-hit != 'true'
        run: | 
          cd experiment/methods/src
          echo "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv"
          echo "Running $install_file"
          echo "////////////////////////////////////////////////////////////////////////////////"
          bash ${{ matrix.install_file }}
